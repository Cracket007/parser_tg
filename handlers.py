from telethon import events, Button, TelegramClient, types
from telethon.tl.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardHide
)
import sqlite3
from datetime import datetime
import logging
from database import init_db
from messages import INSTRUCTIONS, HELP_MESSAGE
from client_manager import start_client, stop_client, check_bot_permissions, send_message_to_target, phone_code_hashes

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
active_clients = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState:
    WAITING_API_ID = 'waiting_api_id'
    WAITING_API_HASH = 'waiting_api_hash'
    WAITING_PHONE = 'waiting_phone'
    WAITING_KEYWORDS = 'waiting_keywords'
    EDIT_API_ID = 'edit_api_id'
    EDIT_API_HASH = 'edit_api_hash'
    EDIT_PHONE = 'edit_phone'
    EDIT_KEYWORDS = 'edit_keywords'
    WAITING_CODE = 'waiting_code'

async def start_handler(event, bot):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (event.sender_id,))
    user = c.fetchone()
    conn.close()

    if user and user[4]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        keyboard = [
            [Button.inline('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä', 'start_parser')],
            [Button.inline('üîÑ –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ', 'reset_settings')]
        ]
        await event.respond("–ü–∞—Ä—Å–µ—Ä —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=keyboard)
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_states[event.sender_id] = UserState.WAITING_API_ID
        await event.respond("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –¥–ª—è Telegram.\n\n" + INSTRUCTIONS)

async def callback_handler(event, bot):
    if event.data == b'start_parser':
        await start_existing_parser(event, bot)
    elif event.data == b'reset_settings':
        await reset_user_settings(event)
    elif event.data == b'edit_api_id':
        user_states[event.sender_id] = UserState.EDIT_API_ID
        await event.respond("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API ID:")
    elif event.data == b'edit_api_hash':
        user_states[event.sender_id] = UserState.EDIT_API_HASH
        await event.respond("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API HASH:")
    elif event.data == b'edit_phone':
        user_states[event.sender_id] = UserState.EDIT_PHONE
        await event.respond("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif event.data == b'edit_keywords':
        user_states[event.sender_id] = UserState.EDIT_KEYWORDS
        await event.respond("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

async def help_handler(event, bot):
    await event.respond(HELP_MESSAGE)

async def id_handler(event, bot):
    chat = await event.get_chat()
    
    response = f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
    response += f"ID: {chat.id}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if hasattr(chat, 'megagroup') and chat.megagroup:
        chat_type = "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
    elif hasattr(chat, 'channel') and chat.channel:
        chat_type = "–ö–∞–Ω–∞–ª"
    elif hasattr(chat, 'gigagroup') and chat.gigagroup:
        chat_type = "–ì–∏–≥–∞–≥—Ä—É–ø–ø–∞"
    elif hasattr(chat, 'group') and chat.group:
        chat_type = "–ì—Ä—É–ø–ø–∞"
    else:
        chat_type = "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    
    response += f"–¢–∏–ø: {chat_type}\n"
    
    if hasattr(chat, 'title') and chat.title:
        response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
    
    if hasattr(chat, 'username') and chat.username:
        response += f"Username: @{chat.username}\n"
        
    if chat_type == "–õ–∏—á–Ω—ã–π —á–∞—Ç":
        sender = await event.get_sender()
        response += f"\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        response += f"–ò–º—è: {sender.first_name}\n"
        if sender.username:
            response += f"Username: @{sender.username}\n"
            
    await event.respond(response)

async def stop_handler(event, bot):
    user_id = event.sender_id
    if await stop_client(user_id):
        await event.respond("üõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await event.respond("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")

async def stats_handler(event, bot):
    user_id = event.sender_id
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT messages_found, last_active, is_active FROM users WHERE user_id = ?", (user_id,))
    data = c.fetchone()
    conn.close()

    if data:
        messages_found, last_active, is_active = data
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:\n\n"
        stats_text += f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}\n"
        stats_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n"
        stats_text += f"‚ö°Ô∏è –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        await event.respond(stats_text)
    else:
        await event.respond("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

async def setchat_handler(event, bot):
    await event.respond("""
–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
3Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º–Ω–µ

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é.
""")

async def start_existing_parser(event, bot):
    user_id = event.sender_id
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT api_id, api_hash, phone, keywords FROM users WHERE user_id = ?", (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if user_data:
        api_id, api_hash, phone, keywords = user_data
        result = await start_client(user_id, api_id, api_hash, phone, keywords, bot)
        if result is True:  # –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ True
            await event.respond("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        elif result is False:  # –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ False
            await event.respond("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞")
        # –ï—Å–ª–∏ None - –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    else:
        await event.respond("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

async def reset_user_settings(event):
    user_id = event.sender_id
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
    session_file = f'sessions/{user_id}.session'
    try:
        import os
        if os.path.exists(session_file):
            os.remove(session_file)
            print(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

    # –û—á–∏—â–∞–µ–º –ë–î
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    await stop_client(user_id)
    await event.respond(
        "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞.\n"
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å target_chat_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def send_message_to_target(user_id, message, bot):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT target_chat_id FROM users WHERE user_id = ?", (user_id,))
        target_chat = c.fetchone()
        conn.close()
        
        chat_id = target_chat[0] if target_chat and target_chat[0] else user_id
        
        try:
            await bot.send_message(int(chat_id), message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await bot.send_message(user_id, message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        await bot.send_message(user_id, message)

async def message_handler(event, bot):
    user_id = event.sender_id
    message = event.message

    if user_id in user_states:
        state = user_states[user_id]
        
        if state == UserState.WAITING_API_ID:
            try:
                api_id = int(message.text)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É API_ID (–æ–±—ã—á–Ω–æ 7-8 —Ü–∏—Ñ—Ä)
                if len(str(api_id)) > 10:
                    await event.respond("‚ùå API ID —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. API ID –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7-8 —Ü–∏—Ñ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                if len(str(api_id)) < 5:
                    await event.respond("‚ùå API ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. API ID –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7-8 —Ü–∏—Ñ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                    
                conn = sqlite3.connect('users.db')
                c = conn.cursor()
                c.execute("INSERT OR REPLACE INTO users (user_id, api_id) VALUES (?, ?)", 
                         (user_id, int(api_id)))
                conn.commit()
                conn.close()
                
                user_states[user_id] = UserState.WAITING_API_HASH
                await event.respond("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API HASH:")
            except ValueError:
                await event.respond("‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                
        elif state == UserState.WAITING_API_HASH:
            if len(message.text) != 32:
                await event.respond("‚ùå API HASH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32 —Å–∏–º–≤–æ–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç API HASH (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ hex —Å–∏–º–≤–æ–ª—ã)
            if not all(c in '0123456789abcdef' for c in message.text.lower()):
                await event.respond("‚ùå API HASH –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (0-9, a-f). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
                
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute("UPDATE users SET api_hash = ? WHERE user_id = ?", 
                     (message.text, user_id))
            conn.commit()
            conn.close()
            
            user_states[user_id] = UserState.WAITING_PHONE
            await event.respond(
                "‚ùóÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API ID –∏ API HASH –æ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: +380995364081"
            )
            
        elif state == UserState.WAITING_PHONE:
            phone = message.text
            if not phone.startswith('+'):
                phone = '+' + phone
                
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute("UPDATE users SET phone = ? WHERE user_id = ?", 
                     (phone, user_id))
            conn.commit()
            conn.close()
            
            user_states[user_id] = UserState.WAITING_KEYWORDS
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await event.respond(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", 
                buttons=ReplyKeyboardHide()
            )
            
        elif state == UserState.WAITING_KEYWORDS:
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute("UPDATE users SET keywords = ? WHERE user_id = ?", 
                     (message.text, user_id))
            conn.commit()
            conn.close()
            
            del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await event.respond("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞")
            
        elif state == UserState.EDIT_API_ID:
            try:
                api_id = int(message)
                conn = sqlite3.connect('users.db')
                c = conn.cursor()
                c.execute("UPDATE users SET api_id = ? WHERE user_id = ?", (api_id, user_id))
                conn.commit()
                conn.close()
                del user_states[user_id]
                await event.respond("‚úÖ API ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            except ValueError:
                await event.respond("‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                
        elif state in [UserState.EDIT_API_HASH, UserState.EDIT_PHONE, UserState.EDIT_KEYWORDS]:
            field = {
                UserState.EDIT_API_HASH: 'api_hash',
                UserState.EDIT_PHONE: 'phone',
                UserState.EDIT_KEYWORDS: 'keywords'
            }[state]
            
            conn = sqlite3.connect('users.db')
            c = conn.cursor()
            c.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (message, user_id))
            conn.commit()
            conn.close()
            
            del user_states[user_id]
            await event.respond(f"‚úÖ {field.replace('_', ' ').title()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
        elif state == UserState.WAITING_CODE:
            try:
                print(f"\nüì± –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                conn = sqlite3.connect('users.db')
                c = conn.cursor()
                c.execute("SELECT api_id, api_hash, phone FROM users WHERE user_id = ?", (user_id,))
                user_data = c.fetchone()
                conn.close()
                
                if not user_data:
                    print("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                    await event.respond("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                    
                api_id, api_hash, phone = user_data
                print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: API_ID={api_id}, HASH={api_hash[:8]}..., PHONE={phone}")
                
                code = message.text.strip()
                print(f"üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥: {code}")

                phone_code_hash = phone_code_hashes.get(user_id)
                print(f"üì® –ü–æ–ª—É—á–µ–Ω hash: {phone_code_hash[:8] if phone_code_hash else 'None'}")
                
                if not phone_code_hash:
                    print("‚ö†Ô∏è Hash –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥")
                    await event.respond("‚åõÔ∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∫–æ–¥...")
                    await start_client(user_id, api_id, api_hash, phone, "", bot)
                    return

                try:
                    print("üîê –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                    client = TelegramClient(f'sessions/{user_id}', api_id, api_hash)
                    await client.connect()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ö—ç—à–µ–º
                    await client.sign_in(
                        phone=phone,
                        code=code,
                        phone_code_hash=phone_code_hash
                    )
                    
                    print("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!")
                    del phone_code_hashes[user_id]
                    del user_states[user_id]
                    
                    await event.respond(
                        "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ /settings —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                    )
                    
                except Exception as e:
                    error_msg = str(e).lower()
                    if "phone code invalid" in error_msg:
                        await event.respond(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."
                        )
                    elif "flood" in error_msg or "banned" in error_msg:
                        await event.respond(
                            "‚ö†Ô∏è Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞.\n\n"
                            "–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                            "1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 15-30 –º–∏–Ω—É—Ç\n"
                            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
                            "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥"
                        )
                    elif "was blocked" in error_msg:
                        await event.respond(
                            "‚ö†Ô∏è Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Ö–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'\n"
                            "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã\n"
                            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
                        )
                    else:
                        await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
                
                finally:
                    await client.disconnect()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def settings_handler(event, bot):
    user_id = event.sender_id
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT api_id, api_hash, phone, keywords FROM users WHERE user_id = ?", (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if user_data:
        api_id, api_hash, phone, keywords = user_data
        masked_hash = f"{api_hash[:8]}...{api_hash[-4:]}" if len(api_hash) > 12 else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        settings_text = "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        settings_text += f"üìå API ID: {api_id}\n"
        settings_text += f"üîë API HASH: {masked_hash}\n"
        settings_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        settings_text += f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [Button.inline('üìù –ò–∑–º–µ–Ω–∏—Ç—å API ID', 'edit_api_id'),
             Button.inline('üîë –ò–∑–º–µ–Ω–∏—Ç—å API HASH', 'edit_api_hash')],
            [Button.inline('üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'edit_phone'),
             Button.inline('üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', 'edit_keywords')],
            [Button.inline('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'reset_settings')]
        ]
        
        await event.respond(settings_text, buttons=keyboard)
    else:
        await event.respond("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏) 