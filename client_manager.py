from telethon import TelegramClient, events
import logging
import sqlite3
from datetime import datetime
import asyncio

logger = logging.getLogger(__name__)
active_clients = {}
phone_code_hashes = {}

async def start_client(user_id, api_id, api_hash, phone, keywords, bot):
    try:
        print(f"\nüîê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {phone}")
        print(f"üìù –î–∞–Ω–Ω—ã–µ: API_ID={api_id}, HASH={api_hash[:8]}...")
        
        client = TelegramClient(f'sessions/{user_id}', int(api_id), api_hash)
        await client.connect()
        
        is_authorized = await client.is_user_authorized()
        print(f"üì± –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if is_authorized else '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}")
        
        if not is_authorized:
            try:
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥...")
                send_code_result = await client.send_code_request(phone)
                phone_code_hash = send_code_result.phone_code_hash
                print(f"üì® –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. Hash: {phone_code_hash[:8]}...")
                
                phone_code_hashes[user_id] = phone_code_hash
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω hash –¥–ª—è user_id: {user_id}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
                from handlers import user_states, UserState
                user_states[user_id] = UserState.WAITING_CODE
                
                await bot.send_message(
                    user_id, 
                    "üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
                    "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ:"
                )
                await client.disconnect()
                return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ False
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
                await client.disconnect()
                return False

        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        active_clients[user_id] = client
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        if 'client' in locals():
            await client.disconnect()
        return False

async def stop_client(user_id):
    if user_id in active_clients:
        client = active_clients[user_id]
        await client.disconnect()
        del active_clients[user_id]
        
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE users SET is_active = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        return True
    return False

async def check_bot_permissions(chat_id, bot):
    try:
        bot_member = await bot.get_permissions(int(chat_id))
        return bot_member.send_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return False

async def send_message_to_target(user_id, message, bot):
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT target_chat_id FROM users WHERE user_id = ?", (user_id,))
        target_chat = c.fetchone()
        conn.close()
        
        chat_id = target_chat[0] if target_chat and target_chat[0] else user_id
        
        try:
            await bot.send_message(int(chat_id), message)
        except Exception as e:
            if "Chat not found" in str(e) or "Channel not found" in str(e):
                await bot.send_message(user_id, """
‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç!

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1Ô∏è‚É£ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
2Ô∏è‚É£ –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3Ô∏è‚É£ –ß–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchat –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.
""")
            else:
                raise e
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.send_message(user_id, message) 