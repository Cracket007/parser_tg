from telethon import TelegramClient, events
import asyncio
import os
from dotenv import load_dotenv
import logging
from database import init_db
from handlers import *
import signal
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.WARNING,  # –ú–µ–Ω—è–µ–º —Å INFO –Ω–∞ WARNING —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    format='%(message)s'    # –£–ø—Ä–æ—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

async def get_bot_credentials():
    """–ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT api_id, api_hash FROM bot_credentials LIMIT 1")
    creds = c.fetchone()
    conn.close()
    
    if not creds:
        raise ValueError("Bot credentials not found in database!")
    return int(creds[0]), creds[1]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–æ—Ç–∞
bot = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∂–µ

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
running = True

def signal_handler(sig, frame):
    global running
    logger.info("\n‚åõÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    running = False

async def stop_all_clients():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""
    for user_id in list(active_clients.keys()):
        await stop_client(user_id)
    logger.info("‚úÖ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def register_handlers(bot):
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.add_event_handler(lambda e: message_handler(e, bot), events.NewMessage)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.add_event_handler(lambda e: start_handler(e, bot), events.NewMessage(pattern='/start'))
    bot.add_event_handler(lambda e: help_handler(e, bot), events.NewMessage(pattern='/help'))
    bot.add_event_handler(lambda e: id_handler(e, bot), events.NewMessage(pattern='/id'))
    bot.add_event_handler(lambda e: stop_handler(e, bot), events.NewMessage(pattern='/stop'))
    bot.add_event_handler(lambda e: stats_handler(e, bot), events.NewMessage(pattern='/stats'))
    bot.add_event_handler(lambda e: setchat_handler(e, bot), events.NewMessage(pattern='/setchat'))
    bot.add_event_handler(lambda e: callback_handler(e, bot), events.CallbackQuery())
    bot.add_event_handler(lambda e: settings_handler(e, bot), events.NewMessage(pattern='/settings'))

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    signal.signal(signal.SIGINT, signal_handler)
    
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    global bot
    api_id, api_hash = await get_bot_credentials()
    bot = TelegramClient('bot', api_id, api_hash)
    
    if not os.path.exists('sessions'):
        os.makedirs('sessions')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    await bot.start(bot_token=BOT_TOKEN)
    register_handlers(bot)
    
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    
    try:
        while running:
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await stop_all_clients()
        await bot.disconnect()
        logger.info("üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
